name: Build and Release uBlock MV3  
  
on:  
  schedule:  
    # 每天检查一次原仓库更新
    - cron: '0 0 * * *'  
  workflow_dispatch:  
    inputs:  
      version:  
        description: 'Release version (e.g., 1.0.0)'  
        required: false  
        type: string  
  
permissions:  
  contents: write  
  
jobs:  
  check-updates:  
    runs-on: ubuntu-latest  
    outputs:  
      should_build: ${{ steps.check.outputs.should_build }}  
      latest_commit: ${{ steps.check.outputs.latest_commit }}  
    steps:  
      - name: Checkout current repo  
        uses: actions/checkout@v4  
        with:  
          fetch-depth: 1  
            
      - name: Check for upstream updates  
        id: check  
        run: |  
          UPSTREAM_COMMIT=$(git ls-remote https://github.com/r58Playz/uBlock-mv3.git HEAD | cut -f1)  
          echo "Upstream latest commit: $UPSTREAM_COMMIT"  
            
          if [ -f .last_build_commit ]; then  
            LAST_COMMIT=$(cat .last_build_commit)  
            echo "Last built commit: $LAST_COMMIT"  
          else  
            LAST_COMMIT=""  
            echo "No previous build found"  
          fi  
            
          if [ "$UPSTREAM_COMMIT" != "$LAST_COMMIT" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then  
            echo "should_build=true" >> $GITHUB_OUTPUT  
            echo "New commits detected or manual trigger"  
          else  
            echo "should_build=false" >> $GITHUB_OUTPUT  
            echo "No new commits"  
          fi  
            
          echo "latest_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT  
  
  build-and-release:  
    needs: check-updates  
    if: needs.check-updates.outputs.should_build == 'true'  
    runs-on: ubuntu-latest  
      
    steps:  
      - name: Checkout upstream repository  
        uses: actions/checkout@v4  
        with:  
          repository: r58Playz/uBlock-mv3  
          ref: master  
          fetch-depth: 0  
            
      - name: Setup Node.js  
        uses: actions/setup-node@v4  
        with:  
          node-version: '18'  
            
      - name: Build using make  
        run: |  
          make  
            
      - name: Determine version  
        id: version  
        run: |  
          if [ -n "${{ inputs.version }}" ]; then  
            VERSION="${{ inputs.version }}"  
          else  
            VERSION="$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"  
          fi  
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT  
          echo "Building version: $VERSION"  
            
      - name: Package Chromium build as ZIP  
        run: |  
          cd dist/build  
          zip -r uBlock0_${{ steps.version.outputs.VERSION }}.chromium.zip uBlock0.chromium/  
            
      - name: Restore PEM key from secrets  
        run: |  
          echo "${{ secrets.EXTENSION_PEM_KEY }}" > extension.pem  
            
      - name: Install Chromium for CRX packaging  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y chromium-browser  
            
      - name: Package as CRX  
        run: |  
          chromium-browser \  
            --pack-extension=dist/build/uBlock0.chromium \  
            --pack-extension-key=extension.pem \  
            --no-sandbox \  
            --headless  
      
          # 移动并重命名生成的 CRX 文件  
          if [ -f dist/build/uBlock0.chromium.crx ]; then  
            mv dist/build/uBlock0.chromium.crx dist/build/uBlock0_${{ steps.version.outputs.VERSION }}.chromium.crx  
          fi  
      
          # 清理 PEM 文件  
          rm -f extension.pem
            
      - name: Generate release notes  
        run: |  
          echo "# uBlock Origin MV3 - ${{ steps.version.outputs.VERSION }}" > release-notes.md  
          echo "" >> release-notes.md  
          echo "## Build Information" >> release-notes.md  
          echo "- Build Date: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md  
          echo "- Upstream Commit: ${{ needs.check-updates.outputs.latest_commit }}" >> release-notes.md  
          echo "- Commit URL: https://github.com/r58Playz/uBlock-mv3/commit/${{ needs.check-updates.outputs.latest_commit }}" >> release-notes.md  
          echo "" >> release-notes.md  
          echo "## Installation" >> release-notes.md  
          echo "### ZIP (Unpacked Extension)" >> release-notes.md  
          echo "1. Download and extract the zip file" >> release-notes.md  
          echo "2. Load unpacked extension in Chrome (chrome://extensions/)" >> release-notes.md  
          echo "3. Add commandline flag: \`--allowlisted-extension-id=<extension_id>\`" >> release-notes.md  
          echo "4. Enable 'Allow User Scripts' in extension settings" >> release-notes.md  
          echo "5. Restart Chrome" >> release-notes.md  
          echo "" >> release-notes.md  
          echo "### CRX (Packed Extension)" >> release-notes.md  
          echo "1. Download the .crx file" >> release-notes.md  
          echo "2. Drag and drop into Chrome extensions page" >> release-notes.md  
          echo "3. Add commandline flag: \`--allowlisted-extension-id=<extension_id>\`" >> release-notes.md  
          echo "4. Enable 'Allow User Scripts' in extension settings" >> release-notes.md  
          echo "5. Restart Chrome" >> release-notes.md  
          echo "" >> release-notes.md  
          if [ -f CHANGELOG.md ]; then  
            echo "## Recent Changes" >> release-notes.md  
            grep -m1 -B10000 -- "----------" CHANGELOG.md >> release-notes.md || true  
          fi  
            
      - name: Create GitHub Release  
        uses: softprops/action-gh-release@v2  
        with:  
          tag_name: v${{ steps.version.outputs.VERSION }}  
          name: Release ${{ steps.version.outputs.VERSION }}  
          body_path: release-notes.md  
          draft: false  
          prerelease: false  
          files: |  
            dist/build/uBlock0_${{ steps.version.outputs.VERSION }}.chromium.zip  
            dist/build/uBlock0_${{ steps.version.outputs.VERSION }}.chromium.crx  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
            
      - name: Update last build commit  
        uses: actions/checkout@v4  
        with:  
          ref: ${{ github.ref }}  
            
      - name: Save build commit  
        run: |  
          echo "${{ needs.check-updates.outputs.latest_commit }}" > .last_build_commit  
          git config user.name "github-actions[bot]"  
          git config user.email "github-actions[bot]@users.noreply.github.com"  
          git add .last_build_commit  
          git commit -m "Update last build commit to ${{ needs.check-updates.outputs.latest_commit }}"  
          git push